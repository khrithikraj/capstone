{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HIRITHIK RAJ\\\\Desktop\\\\Sem 7\\\\Capstone Project\\\\Safe\\\\hrithik\\\\expense-tracker_fullstack\\\\frontend\\\\src\\\\Components\\\\ExpenseChartsPage\\\\ExpenseChartsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Line, Bar, Pie } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, PointElement, LineElement, ArcElement, Title, Tooltip, Legend } from 'chart.js';\nimport expensesData from '../../frontend/src/Components/PredictionPage/predictions.json'; // Adjust path to where expenses.json is stored\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, BarElement, PointElement, LineElement, ArcElement, Title, Tooltip, Legend);\nfunction ExpenseChartsPage() {\n  _s();\n  const [selectedYear, setSelectedYear] = useState(\"2023\");\n  const [selectedMonth, setSelectedMonth] = useState(\"1\");\n  const [chartData, setChartData] = useState({\n    monthlySpendingData: null,\n    totalPerMonthData: null,\n    categorySpendingData: null,\n    highestCategoryData: null\n  });\n  const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  const categories = [\"Other\", \"Clothing\", \"Travelling\", \"Groceries\", \"Entertainment\", \"Health\", \"Subscriptions\", \"Takeaways\"];\n  const filterDataByYear = (data, year) => data.filter(item => new Date(item.Date).getFullYear() === parseInt(year));\n  const filterDataByYearAndMonth = (data, year, month) => data.filter(item => {\n    const date = new Date(item.Date);\n    return date.getFullYear() === parseInt(year) && date.getMonth() + 1 === parseInt(month);\n  });\n  const processMonthlySpendingData = data => {\n    const categoryTotals = categories.reduce((acc, category) => {\n      acc[category] = Array(12).fill(0);\n      return acc;\n    }, {});\n    data.forEach(expense => {\n      const month = new Date(expense.Date).getMonth();\n      const category = expense.Category;\n      if (categoryTotals[category]) {\n        categoryTotals[category][month] += expense.Amount;\n      }\n    });\n    const datasets = Object.keys(categoryTotals).map(category => ({\n      label: category,\n      data: categoryTotals[category],\n      borderColor: `rgba(${Math.floor(Math.random() * 255)}, ${Math.floor(Math.random() * 255)}, ${Math.floor(Math.random() * 255)}, 1)`,\n      backgroundColor: 'rgba(0, 0, 0, 0)',\n      fill: false,\n      tension: 0.1\n    }));\n    return {\n      labels: monthNames,\n      datasets: datasets\n    };\n  };\n  const processTotalPerMonthData = data => {\n    const monthlyTotals = Array(12).fill(0);\n    data.forEach(expense => {\n      const month = new Date(expense.Date).getMonth();\n      monthlyTotals[month] += expense.Amount;\n    });\n    return {\n      labels: monthNames,\n      datasets: [{\n        label: 'Total Amount Per Month',\n        data: monthlyTotals,\n        backgroundColor: 'rgba(54, 162, 235, 0.6)',\n        borderColor: 'rgba(54, 162, 235, 1)',\n        borderWidth: 1\n      }]\n    };\n  };\n  const processCategorySpendingData = data => {\n    const categorySums = categories.reduce((acc, category) => {\n      acc[category] = 0;\n      return acc;\n    }, {});\n    data.forEach(expense => {\n      if (categories.includes(expense.Category)) {\n        categorySums[expense.Category] += expense.Amount;\n      }\n    });\n    return {\n      labels: categories,\n      datasets: [{\n        data: categories.map(category => categorySums[category]),\n        backgroundColor: categories.map(() => `rgba(${Math.floor(Math.random() * 255)}, ${Math.floor(Math.random() * 255)}, ${Math.floor(Math.random() * 255)}, 0.6)`),\n        borderColor: 'rgba(255, 255, 255, 0.7)',\n        borderWidth: 1\n      }]\n    };\n  };\n  const processHighestCategoryData = data => {\n    const highestCategories = [];\n    for (let month = 0; month < 12; month++) {\n      const monthlyData = data.filter(expense => new Date(expense.Date).getMonth() === month);\n      const categorySums = categories.reduce((acc, category) => {\n        acc[category] = 0;\n        return acc;\n      }, {});\n      monthlyData.forEach(expense => {\n        if (categories.includes(expense.Category)) {\n          categorySums[expense.Category] += expense.Amount;\n        }\n      });\n      const highestCategory = Object.keys(categorySums).reduce((highest, category) => {\n        return categorySums[category] > categorySums[highest] ? category : highest;\n      }, categories[0]);\n      highestCategories.push({\n        month: monthNames[month],\n        category: highestCategory,\n        amount: categorySums[highestCategory]\n      });\n    }\n    return {\n      labels: highestCategories.map(item => item.month),\n      datasets: [{\n        label: 'Highest Spent Category Per Month',\n        data: highestCategories.map(item => item.amount),\n        backgroundColor: 'rgba(153, 102, 255, 0.6)',\n        borderColor: 'rgba(153, 102, 255, 1)',\n        borderWidth: 1\n      }]\n    };\n  };\n  useEffect(() => {\n    const filteredDataByYear = filterDataByYear(expensesData, selectedYear);\n    const filteredDataByYearAndMonth = filterDataByYearAndMonth(expensesData, selectedYear, selectedMonth);\n    setChartData({\n      monthlySpendingData: processMonthlySpendingData(filteredDataByYear),\n      totalPerMonthData: processTotalPerMonthData(filteredDataByYear),\n      categorySpendingData: processCategorySpendingData(filteredDataByYearAndMonth),\n      highestCategoryData: processHighestCategoryData(filteredDataByYear)\n    });\n  }, [selectedYear, selectedMonth]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Expenses Overview\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Year: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      value: selectedYear,\n      onChange: e => setSelectedYear(e.target.value),\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        children: \"2022\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        children: \"2023\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Month: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      value: selectedMonth,\n      onChange: e => setSelectedMonth(e.target.value),\n      children: monthNames.map((month, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: index + 1,\n        children: month\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [chartData.monthlySpendingData && /*#__PURE__*/_jsxDEV(Line, {\n        data: chartData.monthlySpendingData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 43\n      }, this), chartData.totalPerMonthData && /*#__PURE__*/_jsxDEV(Bar, {\n        data: chartData.totalPerMonthData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 41\n      }, this), chartData.categorySpendingData && /*#__PURE__*/_jsxDEV(Pie, {\n        data: chartData.categorySpendingData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 44\n      }, this), chartData.highestCategoryData && /*#__PURE__*/_jsxDEV(Bar, {\n        data: chartData.highestCategoryData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 43\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 5\n  }, this);\n}\n_s(ExpenseChartsPage, \"Un2aaUCU3iguv+S+9g+By/BC15Q=\");\n_c = ExpenseChartsPage;\nexport default ExpenseChartsPage;\nvar _c;\n$RefreshReg$(_c, \"ExpenseChartsPage\");","map":{"version":3,"names":["React","useState","useEffect","Line","Bar","Pie","Chart","ChartJS","CategoryScale","LinearScale","BarElement","PointElement","LineElement","ArcElement","Title","Tooltip","Legend","expensesData","register","ExpenseChartsPage","selectedYear","setSelectedYear","selectedMonth","setSelectedMonth","chartData","setChartData","monthlySpendingData","totalPerMonthData","categorySpendingData","highestCategoryData","monthNames","categories","filterDataByYear","data","year","filter","item","Date","getFullYear","parseInt","filterDataByYearAndMonth","month","date","getMonth","processMonthlySpendingData","categoryTotals","reduce","acc","category","Array","fill","forEach","expense","Category","Amount","datasets","Object","keys","map","label","borderColor","Math","floor","random","backgroundColor","tension","labels","processTotalPerMonthData","monthlyTotals","borderWidth","processCategorySpendingData","categorySums","includes","processHighestCategoryData","highestCategories","monthlyData","highestCategory","highest","push","amount","filteredDataByYear","filteredDataByYearAndMonth","e","target","value","index"],"sources":["C:/Users/HIRITHIK RAJ/Desktop/Sem 7/Capstone Project/Safe/hrithik/expense-tracker_fullstack/frontend/src/Components/ExpenseChartsPage/ExpenseChartsPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Line, Bar, Pie } from 'react-chartjs-2';\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  PointElement,\r\n  LineElement,\r\n  ArcElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n} from 'chart.js';\r\nimport expensesData from '../../frontend/src/Components/PredictionPage/predictions.json'; // Adjust path to where expenses.json is stored\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  PointElement,\r\n  LineElement,\r\n  ArcElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nfunction ExpenseChartsPage() {\r\n  const [selectedYear, setSelectedYear] = useState(\"2023\");\r\n  const [selectedMonth, setSelectedMonth] = useState(\"1\");\r\n  const [chartData, setChartData] = useState({\r\n    monthlySpendingData: null,\r\n    totalPerMonthData: null,\r\n    categorySpendingData: null,\r\n    highestCategoryData: null\r\n  });\r\n\r\n  const monthNames = [\r\n    \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \r\n    \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\r\n  ];\r\n\r\n  const categories = [\r\n    \"Other\", \"Clothing\", \"Travelling\", \"Groceries\", \"Entertainment\", \r\n    \"Health\", \"Subscriptions\", \"Takeaways\"\r\n  ];\r\n\r\n  const filterDataByYear = (data, year) => data.filter(item => new Date(item.Date).getFullYear() === parseInt(year));\r\n  const filterDataByYearAndMonth = (data, year, month) => data.filter(item => {\r\n    const date = new Date(item.Date);\r\n    return date.getFullYear() === parseInt(year) && (date.getMonth() + 1) === parseInt(month);\r\n  });\r\n\r\n  const processMonthlySpendingData = (data) => {\r\n    const categoryTotals = categories.reduce((acc, category) => {\r\n      acc[category] = Array(12).fill(0);\r\n      return acc;\r\n    }, {});\r\n\r\n    data.forEach(expense => {\r\n      const month = new Date(expense.Date).getMonth();\r\n      const category = expense.Category;\r\n      if (categoryTotals[category]) {\r\n        categoryTotals[category][month] += expense.Amount;\r\n      }\r\n    });\r\n\r\n    const datasets = Object.keys(categoryTotals).map(category => ({\r\n      label: category,\r\n      data: categoryTotals[category],\r\n      borderColor: `rgba(${Math.floor(Math.random() * 255)}, ${Math.floor(Math.random() * 255)}, ${Math.floor(Math.random() * 255)}, 1)`,\r\n      backgroundColor: 'rgba(0, 0, 0, 0)',\r\n      fill: false,\r\n      tension: 0.1,\r\n    }));\r\n\r\n    return {\r\n      labels: monthNames,\r\n      datasets: datasets,\r\n    };\r\n  };\r\n\r\n  const processTotalPerMonthData = (data) => {\r\n    const monthlyTotals = Array(12).fill(0);\r\n    data.forEach(expense => {\r\n      const month = new Date(expense.Date).getMonth();\r\n      monthlyTotals[month] += expense.Amount;\r\n    });\r\n    return {\r\n      labels: monthNames,\r\n      datasets: [{\r\n        label: 'Total Amount Per Month',\r\n        data: monthlyTotals,\r\n        backgroundColor: 'rgba(54, 162, 235, 0.6)',\r\n        borderColor: 'rgba(54, 162, 235, 1)',\r\n        borderWidth: 1,\r\n      }],\r\n    };\r\n  };\r\n\r\n  const processCategorySpendingData = (data) => {\r\n    const categorySums = categories.reduce((acc, category) => {\r\n      acc[category] = 0;\r\n      return acc;\r\n    }, {});\r\n\r\n    data.forEach(expense => {\r\n      if (categories.includes(expense.Category)) {\r\n        categorySums[expense.Category] += expense.Amount;\r\n      }\r\n    });\r\n\r\n    return {\r\n      labels: categories,\r\n      datasets: [{\r\n        data: categories.map(category => categorySums[category]),\r\n        backgroundColor: categories.map(() => `rgba(${Math.floor(Math.random() * 255)}, ${Math.floor(Math.random() * 255)}, ${Math.floor(Math.random() * 255)}, 0.6)`),\r\n        borderColor: 'rgba(255, 255, 255, 0.7)',\r\n        borderWidth: 1,\r\n      }],\r\n    };\r\n  };\r\n\r\n  const processHighestCategoryData = (data) => {\r\n    const highestCategories = [];\r\n    for (let month = 0; month < 12; month++) {\r\n      const monthlyData = data.filter(expense => new Date(expense.Date).getMonth() === month);\r\n      const categorySums = categories.reduce((acc, category) => {\r\n        acc[category] = 0;\r\n        return acc;\r\n      }, {});\r\n\r\n      monthlyData.forEach(expense => {\r\n        if (categories.includes(expense.Category)) {\r\n          categorySums[expense.Category] += expense.Amount;\r\n        }\r\n      });\r\n\r\n      const highestCategory = Object.keys(categorySums).reduce((highest, category) => {\r\n        return categorySums[category] > categorySums[highest] ? category : highest;\r\n      }, categories[0]);\r\n\r\n      highestCategories.push({\r\n        month: monthNames[month],\r\n        category: highestCategory,\r\n        amount: categorySums[highestCategory],\r\n      });\r\n    }\r\n\r\n    return {\r\n      labels: highestCategories.map(item => item.month),\r\n      datasets: [{\r\n        label: 'Highest Spent Category Per Month',\r\n        data: highestCategories.map(item => item.amount),\r\n        backgroundColor: 'rgba(153, 102, 255, 0.6)',\r\n        borderColor: 'rgba(153, 102, 255, 1)',\r\n        borderWidth: 1,\r\n      }],\r\n    };\r\n  };\r\n\r\n  useEffect(() => {\r\n    const filteredDataByYear = filterDataByYear(expensesData, selectedYear);\r\n    const filteredDataByYearAndMonth = filterDataByYearAndMonth(expensesData, selectedYear, selectedMonth);\r\n\r\n    setChartData({\r\n      monthlySpendingData: processMonthlySpendingData(filteredDataByYear),\r\n      totalPerMonthData: processTotalPerMonthData(filteredDataByYear),\r\n      categorySpendingData: processCategorySpendingData(filteredDataByYearAndMonth),\r\n      highestCategoryData: processHighestCategoryData(filteredDataByYear),\r\n    });\r\n  }, [selectedYear, selectedMonth]);\r\n\r\n  return (\r\n    <div>\r\n      <h2>Expenses Overview</h2>\r\n      <label>Year: </label>\r\n      <select value={selectedYear} onChange={(e) => setSelectedYear(e.target.value)}>\r\n        <option>2022</option>\r\n        <option>2023</option>\r\n      </select>\r\n      <label>Month: </label>\r\n      <select value={selectedMonth} onChange={(e) => setSelectedMonth(e.target.value)}>\r\n        {monthNames.map((month, index) => (\r\n          <option key={index} value={index + 1}>{month}</option>\r\n        ))}\r\n      </select>\r\n\r\n      <div>\r\n        {chartData.monthlySpendingData && <Line data={chartData.monthlySpendingData} />}\r\n        {chartData.totalPerMonthData && <Bar data={chartData.totalPerMonthData} />}\r\n        {chartData.categorySpendingData && <Pie data={chartData.categorySpendingData} />}\r\n        {chartData.highestCategoryData && <Bar data={chartData.highestCategoryData} />}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ExpenseChartsPage;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}