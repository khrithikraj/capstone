{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HIRITHIK RAJ\\\\Desktop\\\\Sem 7\\\\Capstone Project\\\\Safe\\\\hrithik\\\\expense-tracker_fullstack\\\\frontend\\\\src\\\\Components\\\\ExpenseChartsPage\\\\ExpenseChartsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Line, Bar, Pie } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, PointElement, LineElement, Title, Tooltip, Legend, ArcElement } from 'chart.js';\nimport expensesData from '../../Components/PredictionPage/predictions.json';\nimport ChartDataLabels from 'chartjs-plugin-datalabels';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, BarElement, PointElement, LineElement, Title, Tooltip, Legend, ArcElement, ChartDataLabels);\nfunction ExpenseChartsPage() {\n  _s();\n  const [chartData, setChartData] = useState({\n    monthlySpendingData: null,\n    totalPerMonthData: null,\n    categorySpendingData: null,\n    highestCategoryData: null\n  });\n  const [selectedMonth, setSelectedMonth] = useState(\"1\");\n  const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  const categories = [\"Other\", \"Clothing\", \"Travelling\", \"Groceries\", \"Entertainment\", \"Health\", \"Subscriptions\", \"Takeaways\"];\n  const filterDataByMonth = (data, month) => {\n    return data.filter(item => parseInt(item.month.split(\"-\")[1]) === parseInt(month));\n  };\n\n  // Process Monthly Spending Trends with one line per category\n  const processMonthlySpendingData = data => {\n    const categoryTotals = categories.reduce((acc, category) => {\n      acc[category] = Array(12).fill(0); // Initialize an array of 12 zeros for each category (for months)\n      return acc;\n    }, {});\n    data.forEach(expense => {\n      const month = parseInt(expense.month.split(\"-\")[1]) - 1;\n      const category = expense.category;\n      if (categoryTotals[category]) {\n        categoryTotals[category][month] += parseInt(expense.prediction); // Convert prediction to int\n      }\n    });\n\n    const datasets = Object.keys(categoryTotals).map(category => ({\n      label: category,\n      data: categoryTotals[category],\n      borderColor: `rgba(${Math.floor(Math.random() * 255)}, ${Math.floor(Math.random() * 255)}, ${Math.floor(Math.random() * 255)}, 1)`,\n      backgroundColor: 'rgba(0, 0, 0, 0)',\n      fill: false,\n      tension: 0.1,\n      pointRadius: 0,\n      pointHoverRadius: 0\n    }));\n    return {\n      labels: monthNames,\n      datasets: datasets\n    };\n  };\n\n  // Process Total Per Month Data\n  const processTotalPerMonthData = data => {\n    const monthlyTotals = Array(12).fill(0);\n    data.forEach(expense => {\n      const month = parseInt(expense.month.split(\"-\")[1]) - 1;\n      monthlyTotals[month] += parseInt(expense.prediction); // Convert prediction to int\n    });\n\n    return {\n      labels: monthNames,\n      datasets: [{\n        label: 'Total Amount Per Month',\n        data: monthlyTotals,\n        backgroundColor: 'rgba(54, 162, 235, 0.6)',\n        borderColor: 'rgba(54, 162, 235, 1)',\n        borderWidth: 1\n      }]\n    };\n  };\n\n  // Process Category Spending Data (Pie chart)\n  const processCategorySpendingData = data => {\n    const categorySums = categories.reduce((acc, category) => {\n      acc[category] = 0;\n      return acc;\n    }, {});\n    data.forEach(expense => {\n      const {\n        category,\n        prediction\n      } = expense;\n      if (categories.includes(category)) {\n        categorySums[category] += parseInt(prediction); // Convert prediction to int\n      }\n    });\n\n    return {\n      labels: categories,\n      datasets: [{\n        data: categories.map(category => categorySums[category]),\n        backgroundColor: categories.map(() => `rgba(${Math.floor(Math.random() * 255)}, ${Math.floor(Math.random() * 255)}, ${Math.floor(Math.random() * 255)}, 0.6)`),\n        borderColor: 'rgba(255, 255, 255, 0.7)',\n        borderWidth: 1\n      }]\n    };\n  };\n\n  // Process Highest Spending Category Per Month (Bar chart)\n  const processHighestCategoryData = data => {\n    const highestCategories = [];\n    for (let month = 0; month < 12; month++) {\n      const monthlyData = data.filter(expense => parseInt(expense.month.split(\"-\")[1]) - 1 === month);\n      const categorySums = categories.reduce((acc, category) => {\n        acc[category] = 0;\n        return acc;\n      }, {});\n      monthlyData.forEach(expense => {\n        const {\n          category,\n          prediction\n        } = expense;\n        if (categories.includes(category)) {\n          categorySums[category] += parseInt(prediction); // Convert prediction to int\n        }\n      });\n\n      const highestCategory = Object.keys(categorySums).reduce((highest, category) => {\n        return categorySums[category] > categorySums[highest] ? category : highest;\n      }, categories[0]);\n      highestCategories.push({\n        month: monthNames[month],\n        category: highestCategory,\n        amount: categorySums[highestCategory]\n      });\n    }\n    return {\n      labels: highestCategories.map(item => item.month),\n      datasets: [{\n        label: 'Highest Spent Category Per Month',\n        data: highestCategories.map(item => item.amount),\n        backgroundColor: 'rgba(153, 102, 255, 0.6)',\n        borderColor: 'rgba(153, 102, 255, 1)',\n        borderWidth: 1,\n        datalabels: {\n          display: true,\n          anchor: 'end',\n          align: 'top',\n          font: {\n            weight: 'bold',\n            size: 12\n          },\n          formatter: (value, context) => {\n            const category = highestCategories[context.dataIndex].category;\n            return category;\n          }\n        }\n      }]\n    };\n  };\n  useEffect(() => {\n    const filteredDataByMonth = filterDataByMonth(expensesData, selectedMonth);\n    setChartData({\n      monthlySpendingData: processMonthlySpendingData(expensesData),\n      totalPerMonthData: processTotalPerMonthData(expensesData),\n      categorySpendingData: processCategorySpendingData(filteredDataByMonth),\n      highestCategoryData: processHighestCategoryData(expensesData)\n    });\n  }, [selectedMonth]);\n  if (!chartData.monthlySpendingData || !chartData.totalPerMonthData || !chartData.categorySpendingData || !chartData.highestCategoryData) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"monthSelect\",\n        children: \"Select Month: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"monthSelect\",\n        value: selectedMonth,\n        onChange: e => setSelectedMonth(e.target.value),\n        children: monthNames.map((month, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: index + 1,\n          children: month\n        }, index + 1, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        flexDirection: 'row',\n        flexWrap: 'wrap',\n        gap: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '45%'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Yearly Spending Trends (Line Chart)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          data: chartData.monthlySpendingData,\n          options: {\n            responsive: true,\n            plugins: {\n              datalabels: {\n                display: false\n              }\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '45%'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Total Amount Per Month (Bar Chart)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Bar, {\n          data: chartData.totalPerMonthData,\n          options: {\n            responsive: true\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '45%'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Pie Chart: Amount Spent by Category\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Pie, {\n          data: chartData.categorySpendingData,\n          options: {\n            responsive: true\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '45%'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Highest Spent Category Per Month (Bar Chart)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Bar, {\n          data: chartData.highestCategoryData,\n          options: {\n            responsive: true\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 200,\n    columnNumber: 5\n  }, this);\n}\n_s(ExpenseChartsPage, \"7JKtnyFiZZRzwGC27ABXp/ZQLHM=\");\n_c = ExpenseChartsPage;\nexport default ExpenseChartsPage;\nvar _c;\n$RefreshReg$(_c, \"ExpenseChartsPage\");","map":{"version":3,"names":["React","useEffect","useState","Line","Bar","Pie","Chart","ChartJS","CategoryScale","LinearScale","BarElement","PointElement","LineElement","Title","Tooltip","Legend","ArcElement","expensesData","ChartDataLabels","register","ExpenseChartsPage","chartData","setChartData","monthlySpendingData","totalPerMonthData","categorySpendingData","highestCategoryData","selectedMonth","setSelectedMonth","monthNames","categories","filterDataByMonth","data","month","filter","item","parseInt","split","processMonthlySpendingData","categoryTotals","reduce","acc","category","Array","fill","forEach","expense","prediction","datasets","Object","keys","map","label","borderColor","Math","floor","random","backgroundColor","tension","pointRadius","pointHoverRadius","labels","processTotalPerMonthData","monthlyTotals","borderWidth","processCategorySpendingData","categorySums","includes","processHighestCategoryData","highestCategories","monthlyData","highestCategory","highest","push","amount","datalabels","display","anchor","align","font","weight","size","formatter","value","context","dataIndex","filteredDataByMonth","padding","e","target","index","flexDirection","flexWrap","gap","width","responsive","plugins"],"sources":["C:/Users/HIRITHIK RAJ/Desktop/Sem 7/Capstone Project/Safe/hrithik/expense-tracker_fullstack/frontend/src/Components/ExpenseChartsPage/ExpenseChartsPage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Line, Bar, Pie } from 'react-chartjs-2';\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  ArcElement\r\n} from 'chart.js';\r\nimport expensesData from '../../Components/PredictionPage/predictions.json';\r\nimport ChartDataLabels from 'chartjs-plugin-datalabels';\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  ArcElement,\r\n  ChartDataLabels\r\n);\r\n\r\nfunction ExpenseChartsPage() {\r\n  const [chartData, setChartData] = useState({\r\n    monthlySpendingData: null,\r\n    totalPerMonthData: null,\r\n    categorySpendingData: null,\r\n    highestCategoryData: null\r\n  });\r\n  const [selectedMonth, setSelectedMonth] = useState(\"1\");\r\n\r\n  const monthNames = [\r\n    \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \r\n    \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\r\n  ];\r\n\r\n  const categories = [\r\n    \"Other\", \"Clothing\", \"Travelling\", \"Groceries\", \"Entertainment\", \"Health\", \"Subscriptions\", \"Takeaways\"\r\n  ];\r\n\r\n  const filterDataByMonth = (data, month) => {\r\n    return data.filter(item => parseInt(item.month.split(\"-\")[1]) === parseInt(month));\r\n  };\r\n\r\n  // Process Monthly Spending Trends with one line per category\r\n  const processMonthlySpendingData = (data) => {\r\n    const categoryTotals = categories.reduce((acc, category) => {\r\n      acc[category] = Array(12).fill(0); // Initialize an array of 12 zeros for each category (for months)\r\n      return acc;\r\n    }, {});\r\n\r\n    data.forEach(expense => {\r\n      const month = parseInt(expense.month.split(\"-\")[1]) - 1;\r\n      const category = expense.category;\r\n      if (categoryTotals[category]) {\r\n        categoryTotals[category][month] += parseInt(expense.prediction); // Convert prediction to int\r\n      }\r\n    });\r\n\r\n    const datasets = Object.keys(categoryTotals).map(category => ({\r\n      label: category,\r\n      data: categoryTotals[category],\r\n      borderColor: `rgba(${Math.floor(Math.random() * 255)}, ${Math.floor(Math.random() * 255)}, ${Math.floor(Math.random() * 255)}, 1)`,\r\n      backgroundColor: 'rgba(0, 0, 0, 0)',\r\n      fill: false,\r\n      tension: 0.1,\r\n      pointRadius: 0,\r\n      pointHoverRadius: 0,\r\n    }));\r\n\r\n    return {\r\n      labels: monthNames,\r\n      datasets: datasets,\r\n    };\r\n  };\r\n\r\n  // Process Total Per Month Data\r\n  const processTotalPerMonthData = (data) => {\r\n    const monthlyTotals = Array(12).fill(0);\r\n    data.forEach(expense => {\r\n      const month = parseInt(expense.month.split(\"-\")[1]) - 1;\r\n      monthlyTotals[month] += parseInt(expense.prediction); // Convert prediction to int\r\n    });\r\n    return {\r\n      labels: monthNames,\r\n      datasets: [{\r\n        label: 'Total Amount Per Month',\r\n        data: monthlyTotals,\r\n        backgroundColor: 'rgba(54, 162, 235, 0.6)',\r\n        borderColor: 'rgba(54, 162, 235, 1)',\r\n        borderWidth: 1,\r\n      }],\r\n    };\r\n  };\r\n\r\n  // Process Category Spending Data (Pie chart)\r\n  const processCategorySpendingData = (data) => {\r\n    const categorySums = categories.reduce((acc, category) => {\r\n      acc[category] = 0;\r\n      return acc;\r\n    }, {});\r\n\r\n    data.forEach(expense => {\r\n      const { category, prediction } = expense;\r\n      if (categories.includes(category)) {\r\n        categorySums[category] += parseInt(prediction); // Convert prediction to int\r\n      }\r\n    });\r\n\r\n    return {\r\n      labels: categories,\r\n      datasets: [{\r\n        data: categories.map(category => categorySums[category]),\r\n        backgroundColor: categories.map(() => `rgba(${Math.floor(Math.random() * 255)}, ${Math.floor(Math.random() * 255)}, ${Math.floor(Math.random() * 255)}, 0.6)`),\r\n        borderColor: 'rgba(255, 255, 255, 0.7)',\r\n        borderWidth: 1,\r\n      }],\r\n    };\r\n  };\r\n\r\n  // Process Highest Spending Category Per Month (Bar chart)\r\n  const processHighestCategoryData = (data) => {\r\n    const highestCategories = [];\r\n  \r\n    for (let month = 0; month < 12; month++) {\r\n      const monthlyData = data.filter(expense => parseInt(expense.month.split(\"-\")[1]) - 1 === month);\r\n      \r\n      const categorySums = categories.reduce((acc, category) => {\r\n        acc[category] = 0;\r\n        return acc;\r\n      }, {});\r\n  \r\n      monthlyData.forEach(expense => {\r\n        const { category, prediction } = expense;\r\n        if (categories.includes(category)) {\r\n          categorySums[category] += parseInt(prediction); // Convert prediction to int\r\n        }\r\n      });\r\n  \r\n      const highestCategory = Object.keys(categorySums).reduce((highest, category) => {\r\n        return categorySums[category] > categorySums[highest] ? category : highest;\r\n      }, categories[0]);\r\n  \r\n      highestCategories.push({\r\n        month: monthNames[month],\r\n        category: highestCategory,\r\n        amount: categorySums[highestCategory],\r\n      });\r\n    }\r\n  \r\n    return {\r\n      labels: highestCategories.map(item => item.month),\r\n      datasets: [{\r\n        label: 'Highest Spent Category Per Month',\r\n        data: highestCategories.map(item => item.amount),\r\n        backgroundColor: 'rgba(153, 102, 255, 0.6)',\r\n        borderColor: 'rgba(153, 102, 255, 1)',\r\n        borderWidth: 1,\r\n        datalabels: {\r\n          display: true,\r\n          anchor: 'end',\r\n          align: 'top',\r\n          font: {\r\n            weight: 'bold',\r\n            size: 12,\r\n          },\r\n          formatter: (value, context) => {\r\n            const category = highestCategories[context.dataIndex].category;\r\n            return category;\r\n          },\r\n        },\r\n      }],\r\n    };\r\n  };\r\n\r\n  useEffect(() => {\r\n    const filteredDataByMonth = filterDataByMonth(expensesData, selectedMonth);\r\n\r\n    setChartData({\r\n      monthlySpendingData: processMonthlySpendingData(expensesData),\r\n      totalPerMonthData: processTotalPerMonthData(expensesData),\r\n      categorySpendingData: processCategorySpendingData(filteredDataByMonth),\r\n      highestCategoryData: processHighestCategoryData(expensesData),\r\n    });\r\n  }, [selectedMonth]);\r\n\r\n  if (!chartData.monthlySpendingData || !chartData.totalPerMonthData || !chartData.categorySpendingData || !chartData.highestCategoryData) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  return (\r\n    <div style={{ padding: '20px' }}>\r\n      <div>\r\n        <label htmlFor=\"monthSelect\">Select Month: </label>\r\n        <select\r\n          id=\"monthSelect\"\r\n          value={selectedMonth}\r\n          onChange={(e) => setSelectedMonth(e.target.value)}\r\n        >\r\n          {monthNames.map((month, index) => (\r\n            <option key={index + 1} value={index + 1}>{month}</option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n\r\n      <div style={{ display: 'flex', flexDirection: 'row', flexWrap: 'wrap', gap: '20px' }}>\r\n        <div style={{ width: '45%' }}>\r\n          <h3>Yearly Spending Trends (Line Chart)</h3>\r\n          <Line data={chartData.monthlySpendingData} options={{\r\n            responsive: true,\r\n            plugins: {\r\n              datalabels: {\r\n                display: false,\r\n              }\r\n            }\r\n          }} />\r\n        </div>\r\n\r\n        <div style={{ width: '45%' }}>\r\n          <h3>Total Amount Per Month (Bar Chart)</h3>\r\n          <Bar data={chartData.totalPerMonthData} options={{ responsive: true }} />\r\n        </div>\r\n\r\n        <div style={{ width: '45%' }}>\r\n          <h3>Pie Chart: Amount Spent by Category</h3>\r\n          <Pie data={chartData.categorySpendingData} options={{ responsive: true }} />\r\n        </div>\r\n\r\n        <div style={{ width: '45%' }}>\r\n          <h3>Highest Spent Category Per Month (Bar Chart)</h3>\r\n          <Bar data={chartData.highestCategoryData} options={{ responsive: true }} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ExpenseChartsPage;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}