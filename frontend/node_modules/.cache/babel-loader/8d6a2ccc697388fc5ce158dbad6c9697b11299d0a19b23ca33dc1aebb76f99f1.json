{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HIRITHIK RAJ\\\\Desktop\\\\Sem 7\\\\Capstone Project\\\\Safe\\\\expense-tracker_fullstack\\\\frontend\\\\src\\\\Components\\\\PredictionPage\\\\PredictionPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Button from '../Button/Button';\nimport styled from 'styled-components';\nimport { saveAs } from 'file-saver';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PredictionPage = () => {\n  _s();\n  const [year, setYear] = useState('');\n  const [predictions, setPredictions] = useState([]);\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  // Function to handle form submission\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const currentYear = new Date().getFullYear();\n\n    // Allow years from 2000 up to 2100 for prediction\n    if (!year || isNaN(year) || year < 2000) {\n      setError(`Please enter a valid year : `);\n      return;\n    }\n    setLoading(true);\n    try {\n      const response = await fetch('http://localhost:5000/api/v1/predict-expenses', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          year\n        })\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setPredictions(data);\n        setError('');\n      } else {\n        setError('Failed to fetch predictions.');\n      }\n    } catch (error) {\n      setError('Error occurred while fetching predictions.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Function to download predictions as CSV\n  const downloadCSV = () => {\n    const csvContent = \"Month,Category,Prediction\\n\" + predictions.map(pred => `${pred.month},${pred.category},${pred.prediction}`).join(\"\\n\");\n\n    // Create a Blob from the CSV content and use FileSaver to save it\n    const blob = new Blob([csvContent], {\n      type: \"text/csv;charset=utf-8;\"\n    });\n    saveAs(blob, \"predictions.csv\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(PredictionPageStyled, {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Expense Predictions for Year\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter year \",\n        value: year,\n        onChange: e => setYear(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"submit-btn\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          name: 'Submit',\n          bPad: '.8rem 1.6rem',\n          bRad: '30px',\n          bg: 'var(--color-accent)',\n          color: '#fff'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading predictions...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 17\n    }, this), predictions.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Predictions:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(PredictionPageStyled, {\n        children: predictions.map((prediction, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: prediction.month\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 17\n          }, this), \" - \", prediction.category, \": \\u20B9\", prediction.prediction.toFixed(2)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"export-btn\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          name: 'Export as CSV',\n          onClick: downloadCSV,\n          bPad: '.8rem 1.6rem',\n          bRad: '30px',\n          bg: 'var(--color-green)',\n          color: '#fff'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(PredictionPage, \"JjRj5L6zoOUMJcOHCxC2vDgViDk=\");\n_c = PredictionPage;\nconst PredictionPageStyled = styled.form`\n    display: flex;\n    flex-direction: column;\n    gap: 2rem;\n    input, textarea, select {\n        font-family: inherit;\n        font-size: inherit;\n        outline: none;\n        border: none;\n        padding: .5rem 1rem;\n        border-radius: 5px;\n        border: 2px solid #fff;\n        background: transparent;\n        resize: none;\n        box-shadow: 0px 1px 15px rgba(0, 0, 0, 0.06);\n        color: rgba(34, 34, 96, 0.9);\n        &::placeholder {\n            color: rgba(34, 34, 96, 0.4);\n        }\n    }\n    \n    h1 {\n        text-align: center; /* Centers the heading */\n        margin-top: 3rem;   /* Moves the heading down */\n        color: rgba(34, 34, 96, 1); /* Optional: Set the color of the heading */\n    }\n\n    .submit-btn, .export-btn {\n        display: flex;\n        justify-content: center; /* This centers the button horizontally */\n        align-items: center;\n    }\n    .submit-btn {\n        button {\n            box-shadow: 0px 1px 15px rgba(0, 0, 0, 0.06);\n            &:hover {\n                background: var(--color-green) !important;\n            }\n        }\n    }\n    .export-btn {\n        margin-top: 2rem; /* Space between prediction list and export button */\n        button {\n            box-shadow: 0px 1px 15px rgba(0, 0, 0, 0.06);\n            &:hover {\n                background: var(--color-green) !important;\n            }\n        }\n    }\n`;\n_c2 = PredictionPageStyled;\nexport default PredictionPage;\nvar _c, _c2;\n$RefreshReg$(_c, \"PredictionPage\");\n$RefreshReg$(_c2, \"PredictionPageStyled\");","map":{"version":3,"names":["React","useState","Button","styled","saveAs","PredictionPage","year","setYear","predictions","setPredictions","error","setError","loading","setLoading","handleSubmit","e","preventDefault","currentYear","Date","getFullYear","isNaN","response","fetch","method","headers","body","JSON","stringify","ok","data","json","downloadCSV","csvContent","map","pred","month","category","prediction","join","blob","Blob","type","target","value","color","length","index","toFixed","PredictionPageStyled","form"],"sources":["C:/Users/HIRITHIK RAJ/Desktop/Sem 7/Capstone Project/Safe/expense-tracker_fullstack/frontend/src/Components/PredictionPage/PredictionPage.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport Button from '../Button/Button';\r\nimport styled from 'styled-components';\r\nimport { saveAs } from 'file-saver';\r\n\r\nconst PredictionPage = () => {\r\n  const [year, setYear] = useState('');\r\n  const [predictions, setPredictions] = useState([]);\r\n  const [error, setError] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  // Function to handle form submission\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const currentYear = new Date().getFullYear();\r\n    \r\n    // Allow years from 2000 up to 2100 for prediction\r\n    if (!year || isNaN(year) || year < 2000 ) {\r\n      setError(`Please enter a valid year : `);\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/v1/predict-expenses', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ year }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setPredictions(data);\r\n        setError('');\r\n      } else {\r\n        setError('Failed to fetch predictions.');\r\n      }\r\n    } catch (error) {\r\n      setError('Error occurred while fetching predictions.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Function to download predictions as CSV\r\n  const downloadCSV = () => {\r\n    const csvContent = \r\n      \"Month,Category,Prediction\\n\" +\r\n      predictions.map(pred => `${pred.month},${pred.category},${pred.prediction}`).join(\"\\n\");\r\n\r\n    // Create a Blob from the CSV content and use FileSaver to save it\r\n    const blob = new Blob([csvContent], { type: \"text/csv;charset=utf-8;\" });\r\n    saveAs(blob, \"predictions.csv\");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      \r\n\r\n      <PredictionPageStyled onSubmit={handleSubmit}>\r\n      <h1>Expense Predictions for Year</h1>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Enter year \"\r\n          value={year}\r\n          onChange={(e) => setYear(e.target.value)}\r\n        />\r\n        <div className=\"submit-btn\">\r\n          <Button \r\n            name={'Submit'}\r\n            bPad={'.8rem 1.6rem'}\r\n            bRad={'30px'}\r\n            bg={'var(--color-accent)'}\r\n            color={'#fff'}\r\n          />\r\n        </div>\r\n      </PredictionPageStyled>\r\n\r\n      {loading && <p>Loading predictions...</p>}\r\n      {error && <p style={{ color: 'red' }}>{error}</p>}\r\n\r\n      {predictions.length > 0 && (\r\n        <div>\r\n          <h2>Predictions:</h2>\r\n          <PredictionPageStyled>\r\n            {predictions.map((prediction, index) => (\r\n              <li key={index}>\r\n                <strong>{prediction.month}</strong> - {prediction.category}: ₹{prediction.prediction.toFixed(2)}\r\n              </li>\r\n            ))}\r\n          </PredictionPageStyled>\r\n\r\n          <div className=\"export-btn\">\r\n            <Button \r\n              name={'Export as CSV'}\r\n              onClick={downloadCSV}\r\n              bPad={'.8rem 1.6rem'}\r\n              bRad={'30px'}\r\n              bg={'var(--color-green)'}\r\n              color={'#fff'}\r\n            />\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\n\r\nconst PredictionPageStyled = styled.form`\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 2rem;\r\n    input, textarea, select {\r\n        font-family: inherit;\r\n        font-size: inherit;\r\n        outline: none;\r\n        border: none;\r\n        padding: .5rem 1rem;\r\n        border-radius: 5px;\r\n        border: 2px solid #fff;\r\n        background: transparent;\r\n        resize: none;\r\n        box-shadow: 0px 1px 15px rgba(0, 0, 0, 0.06);\r\n        color: rgba(34, 34, 96, 0.9);\r\n        &::placeholder {\r\n            color: rgba(34, 34, 96, 0.4);\r\n        }\r\n    }\r\n    \r\n    h1 {\r\n        text-align: center; /* Centers the heading */\r\n        margin-top: 3rem;   /* Moves the heading down */\r\n        color: rgba(34, 34, 96, 1); /* Optional: Set the color of the heading */\r\n    }\r\n\r\n    .submit-btn, .export-btn {\r\n        display: flex;\r\n        justify-content: center; /* This centers the button horizontally */\r\n        align-items: center;\r\n    }\r\n    .submit-btn {\r\n        button {\r\n            box-shadow: 0px 1px 15px rgba(0, 0, 0, 0.06);\r\n            &:hover {\r\n                background: var(--color-green) !important;\r\n            }\r\n        }\r\n    }\r\n    .export-btn {\r\n        margin-top: 2rem; /* Space between prediction list and export button */\r\n        button {\r\n            box-shadow: 0px 1px 15px rgba(0, 0, 0, 0.06);\r\n            &:hover {\r\n                background: var(--color-green) !important;\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\n\r\n\r\nexport default PredictionPage;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}